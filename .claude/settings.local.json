{
  "permissions": {
    "allow": [
      "Bash(ls:*)",
      "Bash(git checkout:*)",
      "Bash(mkdir:*)",
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(find:*)",
      "Bash(brew:*)",
      "Bash(export:*)",
      "Bash(git clone:*)",
      "Bash(make:*)",
      "Bash(createdb:*)",
      "Bash(sudo make:*)",
      "Bash(cp:*)",
      "Bash(psql:*)",
      "Bash(timeout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(alembic init:*)",
      "Bash(alembic revision:*)",
      "Bash(/usr/local/opt/postgresql@17/bin/psql:*)",
      "Bash(PYTHONPATH=/Users/shanjingxiang/projects/MailAssistant/backend python -c \"\nimport os\nimport sys\nsys.path.insert(0, ''/Users/shanjingxiang/projects/MailAssistant'')\nfrom dotenv import load_dotenv\nload_dotenv(''/Users/shanjingxiang/projects/MailAssistant/.env'')\nfrom backend.app.main import app\nprint(''‚úÖ FastAPI app loads successfully'')\n\")",
      "Bash(PYTHONPATH=/Users/shanjingxiang/projects/MailAssistant/backend python -c \"\nimport os\nimport sys\nsys.path.insert(0, ''/Users/shanjingxiang/projects/MailAssistant'')\nfrom dotenv import load_dotenv\nload_dotenv(''/Users/shanjingxiang/projects/MailAssistant/.env'')\nfrom backend.app.main import app\nprint(''‚úÖ FastAPI app loads successfully'')\nprint(''Available routes:'')\nfor route in app.routes:\n    if hasattr(route, ''path''):\n        print(f''  {route.methods if hasattr(route, \"\"methods\"\") else \"\"GET\"\"} {route.path}'')\n\")",
      "Bash(chmod:*)",
      "Bash(alembic upgrade:*)",
      "Bash(PYTHONPATH=/Users/shanjingxiang/projects/MailAssistant python -c \"\nimport os\nimport sys\nsys.path.insert(0, ''/Users/shanjingxiang/projects/MailAssistant'')\nfrom dotenv import load_dotenv\nload_dotenv(''/Users/shanjingxiang/projects/MailAssistant/.env'')\n\n# ÊµãËØïË∞ÉÂ∫¶Âô®Ê®°ÂùóÂØºÂÖ•\ntry:\n    from backend.app.scheduler.scheduler_app import scheduler, start_scheduler, stop_scheduler\n    print(''‚úÖ Scheduler module imports successfully'')\n    \n    from backend.app.scheduler.jobs import setup_user_jobs, create_daily_report_job\n    print(''‚úÖ Jobs module imports successfully'')\n    \n    from backend.app.services.task_service import task_service\n    print(''‚úÖ Task service imports successfully'')\n    \n    from backend.app.main import app\n    print(''‚úÖ FastAPI app with scheduler loads successfully'')\n    \n    print(''üìã Available API routes:'')\n    for route in app.routes:\n        if hasattr(route, ''path'') and hasattr(route, ''methods''):\n            methods = list(route.methods) if route.methods else [''GET'']\n            if route.path.startswith(''/api/scheduler''):\n                print(f''  {methods} {route.path}'')\n    \nexcept Exception as e:\n    print(f''‚ùå Import failed: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=/Users/shanjingxiang/projects/MailAssistant python -c \"\nimport os\nimport sys\nsys.path.insert(0, ''/Users/shanjingxiang/projects/MailAssistant'')\nfrom dotenv import load_dotenv\nload_dotenv(''/Users/shanjingxiang/projects/MailAssistant/.env'')\n\n# ÊµãËØïË∞ÉÂ∫¶Âô®Ê®°ÂùóÂØºÂÖ•\ntry:\n    from backend.app.scheduler.scheduler_app import scheduler, start_scheduler, stop_scheduler\n    print(''‚úÖ Scheduler module imports successfully'')\n    \n    from backend.app.scheduler.jobs import setup_user_jobs, create_daily_report_job\n    print(''‚úÖ Jobs module imports successfully'')\n    \n    from backend.app.services.task_service import task_service\n    print(''‚úÖ Task service imports successfully'')\n    \n    from backend.app.main import app\n    print(''‚úÖ FastAPI app with scheduler loads successfully'')\n    \n    print(''üìã Available API routes:'')\n    for route in app.routes:\n        if hasattr(route, ''path'') and hasattr(route, ''methods''):\n            methods = list(route.methods) if route.methods else [''GET'']\n            if route.path.startswith(''/api/scheduler''):\n                print(''  {} {}''.format(methods, route.path))\n    \nexcept Exception as e:\n    print(''‚ùå Import failed: {}''.format(e))\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=/Users/shanjingxiang/projects/MailAssistant python -c \"\nimport os\nimport sys\nsys.path.insert(0, ''/Users/shanjingxiang/projects/MailAssistant'')\nfrom dotenv import load_dotenv\nload_dotenv(''/Users/shanjingxiang/projects/MailAssistant/.env'')\n\n# ÊµãËØïË∞ÉÂ∫¶Âô®Ê®°ÂùóÂØºÂÖ•\ntry:\n    from backend.app.scheduler.scheduler_app import scheduler, start_scheduler, stop_scheduler\n    print(''‚úÖ Scheduler module imports successfully'')\n    \n    from backend.app.scheduler.jobs import setup_user_jobs, create_daily_report_job\n    print(''‚úÖ Jobs module imports successfully'')\n    \n    from backend.app.services.task_service import task_service\n    print(''‚úÖ Task service imports successfully'')\n    \n    from backend.app.main import app\n    print(''‚úÖ FastAPI app with scheduler loads successfully'')\n    \n    print(''üìã Available scheduler API routes:'')\n    for route in app.routes:\n        if hasattr(route, ''path'') and hasattr(route, ''methods''):\n            methods = list(route.methods) if route.methods else [''GET'']\n            if route.path.startswith(''/api/scheduler''):\n                print(''  {} {}''.format(methods, route.path))\n    \nexcept Exception as e:\n    print(''‚ùå Import failed: {}''.format(e))\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(touch:*)",
      "Bash(rm:*)",
      "Bash(kill:*)",
      "Bash(curl:*)",
      "Bash(PYTHONPATH=backend python3 -m uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload)",
      "Bash(PYTHONPATH=backend python3 -m uvicorn backend.app.main:app --host 127.0.0.1 --port 8001 --reload)",
      "Bash(uvicorn:*)",
      "Bash(pip show:*)",
      "Bash(pkill:*)",
      "Bash(npm install)",
      "Bash(npm start)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(npm test:*)",
      "Bash(gtimeout:*)",
      "Bash(npx tsc:*)",
      "Bash(npm install:*)",
      "Bash(node:*)",
      "Bash(nc:*)",
      "Bash(sudo:*)",
      "Bash(open:*)",
      "Bash(mv:*)",
      "Bash(true)",
      "Bash(cat:*)",
      "Bash(^C)",
      "Bash(alembic stamp:*)",
      "Bash(/Users/shanjingxiang/projects/MailAssistant/run_backend.sh:*)",
      "Bash(./run_backend.sh:*)",
      "WebFetch(domain:github.com)"
    ],
    "deny": []
  }
}