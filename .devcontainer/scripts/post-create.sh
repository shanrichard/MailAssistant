#!/bin/bash

# MailAssistant 开发环境初始化脚本
# 在容器创建后执行（仅执行一次）

set -e  # 遇到错误时退出

echo "🚀 Setting up MailAssistant development environment..."
echo "=================================================="

# 颜色定义
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 1. 创建必要的目录
echo -e "${YELLOW}Creating necessary directories...${NC}"
mkdir -p /workspace/logs
mkdir -p /workspace/data
mkdir -p /workspace/temp

# 2. 设置环境变量文件
echo -e "${YELLOW}Setting up environment variables...${NC}"
if [ ! -f /workspace/.env ]; then
    if [ -f /workspace/.env.example ]; then
        cp /workspace/.env.example /workspace/.env
        echo -e "${GREEN}✓ Created .env file from .env.example${NC}"
    else
        echo -e "${YELLOW}⚠ No .env.example found, creating basic .env file${NC}"
        cat > /workspace/.env << EOL
# MailAssistant Environment Variables
# Generated by devcontainer post-create script

# Database
DATABASE_URL=postgresql://postgres:postgres@db:5432/mailassistant

# Redis (Currently not used)
# REDIS_URL=redis://redis:6379

# Security
SECRET_KEY=dev-secret-key-change-in-production
ENCRYPTION_KEY=dev-encryption-key-change-in-production

# OAuth
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret
GOOGLE_REDIRECT_URI=http://localhost:3000/auth/callback

# LLM APIs (Optional)
OPENAI_API_KEY=your-openai-api-key
ANTHROPIC_API_KEY=your-anthropic-api-key

# Frontend
REACT_APP_API_URL=http://localhost:8000
EOL
        echo -e "${GREEN}✓ Created basic .env file${NC}"
    fi
else
    echo -e "${GREEN}✓ .env file already exists${NC}"
fi

# 3. 等待数据库就绪
echo -e "${YELLOW}Waiting for PostgreSQL to be ready...${NC}"
max_retries=60
retries=0
while ! pg_isready -h db -p 5432 -U postgres > /dev/null 2>&1; do
    retries=$((retries + 1))
    if [ $retries -eq $max_retries ]; then
        echo -e "${YELLOW}⚠ PostgreSQL is not ready after $max_retries attempts${NC}"
        break
    fi
    echo -n "."
    sleep 1
done
echo ""

if pg_isready -h db -p 5432 -U postgres > /dev/null 2>&1; then
    echo -e "${GREEN}✓ PostgreSQL is ready${NC}"
    
    # 4. 运行数据库迁移
    echo -e "${YELLOW}Running database migrations...${NC}"
    cd /workspace/backend
    
    if [ -f alembic.ini ]; then
        # 检查是否需要初始化 alembic
        if ! alembic current 2>/dev/null; then
            echo "Initializing database..."
            alembic stamp head
        fi
        
        # 运行迁移
        alembic upgrade head
        echo -e "${GREEN}✓ Database migrations completed${NC}"
    else
        echo -e "${YELLOW}⚠ No alembic.ini found, skipping migrations${NC}"
    fi
else
    echo -e "${YELLOW}⚠ Skipping database setup - PostgreSQL not available${NC}"
fi

# 5. 安装 Git hooks（如果有）
echo -e "${YELLOW}Setting up Git hooks...${NC}"
cd /workspace
if [ -d .git ] && [ -f .pre-commit-config.yaml ]; then
    pre-commit install || echo -e "${YELLOW}⚠ pre-commit not available${NC}"
    echo -e "${GREEN}✓ Git hooks installed${NC}"
fi

# 6. 创建 VS Code 工作区设置
echo -e "${YELLOW}Configuring VS Code workspace...${NC}"
mkdir -p /workspace/.vscode
if [ ! -f /workspace/.vscode/settings.json ]; then
    cat > /workspace/.vscode/settings.json << EOL
{
    "python.defaultInterpreterPath": "/usr/local/bin/python",
    "python.terminal.activateEnvironment": true,
    "python.linting.enabled": true,
    "python.linting.pylintEnabled": true,
    "python.formatting.provider": "black",
    "editor.formatOnSave": true,
    "editor.rulers": [80, 120],
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/node_modules": true,
        "**/.pytest_cache": true
    }
}
EOL
    echo -e "${GREEN}✓ VS Code workspace settings created${NC}"
fi

# 7. 显示欢迎信息
echo ""
echo -e "${GREEN}=================================================="
echo -e "✨ MailAssistant development environment is ready!"
echo -e "=================================================="
echo ""
echo "Quick start commands:"
echo "  Backend:  cd /workspace/backend && python start_backend.py"
echo "  Frontend: cd /workspace/frontend && npm run dev"
echo ""
echo "Useful URLs:"
echo "  - Frontend: http://localhost:3000"
echo "  - Backend API: http://localhost:8000"
echo "  - API Docs: http://localhost:8000/docs"
echo "  - pgAdmin: http://localhost:5050 (if enabled)"
echo ""
echo "Database connection:"
echo "  - Host: db"
echo "  - Port: 5432"
echo "  - Database: mailassistant"
echo "  - User: postgres"
echo "  - Password: postgres"
echo -e "${NC}"